// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Pango {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class AttrIterator : GLib.Opaque {

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_pango_attr_iterator_copy(IntPtr raw);
		static d_pango_attr_iterator_copy pango_attr_iterator_copy = FuncLoader.LoadFunction<d_pango_attr_iterator_copy>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Pango), "pango_attr_iterator_copy"));

		public Pango.AttrIterator Copy() {
			IntPtr raw_ret = pango_attr_iterator_copy(Handle);
			Pango.AttrIterator ret = raw_ret == IntPtr.Zero ? null : (Pango.AttrIterator) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.AttrIterator), true);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr d_pango_attr_iterator_get(IntPtr raw, int type);
		static d_pango_attr_iterator_get pango_attr_iterator_get = FuncLoader.LoadFunction<d_pango_attr_iterator_get>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Pango), "pango_attr_iterator_get"));

		public Pango.Attribute Get(Pango.AttrType type) {
			IntPtr raw_ret = pango_attr_iterator_get(Handle, (int) type);
			Pango.Attribute ret = Pango.Attribute.GetAttribute (raw_ret);
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool d_pango_attr_iterator_next(IntPtr raw);
		static d_pango_attr_iterator_next pango_attr_iterator_next = FuncLoader.LoadFunction<d_pango_attr_iterator_next>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Pango), "pango_attr_iterator_next"));

		public bool Next() {
			bool raw_ret = pango_attr_iterator_next(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_pango_attr_iterator_range(IntPtr raw, out int start, out int end);
		static d_pango_attr_iterator_range pango_attr_iterator_range = FuncLoader.LoadFunction<d_pango_attr_iterator_range>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Pango), "pango_attr_iterator_range"));

		public void Range(out int start, out int end) {
			pango_attr_iterator_range(Handle, out start, out end);
		}

		public AttrIterator(IntPtr raw) : base(raw) {}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void d_pango_attr_iterator_destroy(IntPtr raw);
		static d_pango_attr_iterator_destroy pango_attr_iterator_destroy = FuncLoader.LoadFunction<d_pango_attr_iterator_destroy>(FuncLoader.GetProcAddress(GLibrary.Load(Library.Pango), "pango_attr_iterator_destroy"));

		protected override void Free (IntPtr raw)
		{
			pango_attr_iterator_destroy (raw);
		}

		[Obsolete("Pango.AttrIterator is now freed automatically")]
		public void Destroy () {}

		class FinalizerInfo {
			IntPtr handle;
			public uint timeoutHandlerId;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				pango_attr_iterator_destroy (handle);
				GLib.Timeout.Remove(timeoutHandlerId);
				return false;
			}
		}

		~AttrIterator ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			info.timeoutHandlerId = GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
