// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GES
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;

    using GStreamer;

    #region Autogenerated code
    public partial class TransitionClip : GES.BaseTransitionClip
    {

        public TransitionClip(IntPtr raw) : base(raw) { }

        [DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr ges_transition_clip_new(int vtype);

        public TransitionClip(GES.VideoStandardTransitionType vtype) : base(IntPtr.Zero)
        {
            if (GetType() != typeof(TransitionClip))
            {
                var vals = new List<GLib.Value>();
                var names = new List<string>();
                names.Add("vtype");
                vals.Add(new GLib.Value(vtype));
                CreateNativeObject(names.ToArray(), vals.ToArray());
                return;
            }
            Raw = ges_transition_clip_new((int)vtype);
        }

        [DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr ges_transition_clip_new_for_nick(IntPtr nick);

        public TransitionClip(string nick) : base(IntPtr.Zero)
        {
            if (GetType() != typeof(TransitionClip))
            {
                var vals = new List<GLib.Value>();
                var names = new List<string>();
                CreateNativeObject(names.ToArray(), vals.ToArray());
                return;
            }
            IntPtr native_nick = GLib.Marshaller.StringToPtrGStrdup(nick);
            Raw = ges_transition_clip_new_for_nick(native_nick);
            GLib.Marshaller.Free(native_nick);
        }

        [GLib.Property("vtype")]
        public GES.VideoStandardTransitionType Vtype
        {
            get
            {
                GLib.Value val = GetProperty("vtype");
                GES.VideoStandardTransitionType ret = (GES.VideoStandardTransitionType)(Enum)val;
                val.Dispose();
                return ret;
            }
            set
            {
                GLib.Value val = new GLib.Value((Enum)value);
                SetProperty("vtype", val);
                val.Dispose();
            }
        }

        public GES.VideoStandardTransitionType VtypeField
        {
            get
            {
                unsafe
                {
                    int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("vtype"));
                    return (GES.VideoStandardTransitionType)(*raw_ptr);
                }
            }
        }


        // Internal representation of the wrapped structure ABI.
        static GLib.AbiStruct _class_abi = null;
        static public new GLib.AbiStruct class_abi
        {
            get
            {
                if (_class_abi == null)
                    _class_abi = new GLib.AbiStruct(new List<GLib.AbiField>{
                        new GLib.AbiField("_ges_reserved"
                            , GES.BaseTransitionClip.class_abi.Fields
                            , (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _ges_reserved
							, null
                            , null
                            , (uint) Marshal.SizeOf(typeof(IntPtr))
                            , 0
                            ),
                    });

                return _class_abi;
            }
        }


        // End of the ABI representation.

        [DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr ges_transition_clip_get_type();

        public static new GLib.GType GType
        {
            get
            {
                IntPtr raw_ret = ges_transition_clip_get_type();
                GLib.GType ret = new GLib.GType(raw_ret);
                return ret;
            }
        }


        static TransitionClip()
        {
            GtkSharp.GstEditingServices.ObjectManager.Initialize();
        }

        // Internal representation of the wrapped structure ABI.
        static GLib.AbiStruct _abi_info = null;
        static public new GLib.AbiStruct abi_info
        {
            get
            {
                if (_abi_info == null)
                    _abi_info = new GLib.AbiStruct(new List<GLib.AbiField>{
                        new GLib.AbiField("vtype"
                            , GES.BaseTransitionClip.abi_info.Fields
                            , (uint) Marshal.SizeOf(System.Enum.GetUnderlyingType(typeof(GES.VideoStandardTransitionType))) // vtype
							, null
                            , "priv"
                            , (long) Marshal.OffsetOf(typeof(GESTransitionClip_vtypeAlign), "vtype")
                            , 0
                            ),
                        new GLib.AbiField("priv"
                            , -1
                            , (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, "vtype"
                            , "_ges_reserved"
                            , (uint) Marshal.SizeOf(typeof(IntPtr))
                            , 0
                            ),
                        new GLib.AbiField("_ges_reserved"
                            , -1
                            , (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _ges_reserved
							, "priv"
                            , null
                            , (uint) Marshal.SizeOf(typeof(IntPtr))
                            , 0
                            ),
                    });

                return _abi_info;
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct GESTransitionClip_vtypeAlign
        {
            sbyte f1;
            private GES.VideoStandardTransitionType vtype;
        }


        // End of the ABI representation.

        #endregion
    }
}
