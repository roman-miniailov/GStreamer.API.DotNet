// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GES
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

	using GStreamer;

	#region Autogenerated code
	public partial class UriSourceAsset : GES.TrackElementAsset {

		public UriSourceAsset (IntPtr raw) : base(raw) {}

		protected UriSourceAsset() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_ges_reserved"
							, GES.TrackElementAsset.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _ges_reserved
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_source_asset_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = ges_uri_source_asset_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_source_asset_get_filesource_asset(IntPtr raw);

		public GES.UriClipAsset FilesourceAsset { 
			get {
				IntPtr raw_ret = ges_uri_source_asset_get_filesource_asset(Handle);
				GES.UriClipAsset ret = GLib.Object.GetObject(raw_ret) as GES.UriClipAsset;
				return ret;
			}
		}

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_source_asset_get_stream_info(IntPtr raw);

		public Gst.PbUtils.DiscovererStreamInfo StreamInfo { 
			get {
				IntPtr raw_ret = ges_uri_source_asset_get_stream_info(Handle);
				Gst.PbUtils.DiscovererStreamInfo ret = GLib.Object.GetObject(raw_ret) as Gst.PbUtils.DiscovererStreamInfo;
				return ret;
			}
		}

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_source_asset_get_stream_uri(IntPtr raw);

		public string StreamUri { 
			get {
				IntPtr raw_ret = ges_uri_source_asset_get_stream_uri(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern bool ges_uri_source_asset_is_image(IntPtr raw);

		public bool IsImage { 
			get {
				bool raw_ret = ges_uri_source_asset_is_image(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}


		static UriSourceAsset ()
		{
			GtkSharp.GstEditingServices.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GES.TrackElementAsset.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, "__ges_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("__ges_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // __ges_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
