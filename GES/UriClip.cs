// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GES 
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

	using GStreamer;

	#region Autogenerated code
	public partial class UriClip : GES.SourceClip {

		public UriClip (IntPtr raw) : base(raw) {}

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_clip_new(IntPtr uri);

		public UriClip (string uri) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (UriClip)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				names.Add ("uri");
				vals.Add (new GLib.Value (uri));
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			Raw = ges_uri_clip_new(native_uri);
			GLib.Marshaller.Free (native_uri);
		}

		[GLib.Property ("is-image")]
		public bool IsImageProp
       {
			get {
				GLib.Value val = GetProperty ("is-image");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("is-image", val);
				val.Dispose ();
			}
		}

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern void ges_uri_clip_set_mute(IntPtr raw, bool mute);

		[GLib.Property ("mute")]
		public bool Mute {
			get {
				GLib.Value val = GetProperty ("mute");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				ges_uri_clip_set_mute(Handle, value);
			}
		}

		[GLib.Property ("supported-formats")]
		public new GES.TrackType SupportedFormats {
			get {
				GLib.Value val = GetProperty ("supported-formats");
				GES.TrackType ret = (GES.TrackType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("supported-formats", val);
				val.Dispose ();
			}
		}

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_clip_get_uri(IntPtr raw);

		[GLib.Property ("uri")]
		public string Uri {
			get  {
				IntPtr raw_ret = ges_uri_clip_get_uri(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_ges_reserved"
							, GES.SourceClip.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _ges_reserved
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_clip_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = ges_uri_clip_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport(DLL.GES, CallingConvention = CallingConvention.Cdecl)]
		static extern bool ges_uri_clip_is_muted(IntPtr raw);

		public bool IsMuted { 
			get {
				bool raw_ret = ges_uri_clip_is_muted(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}


		static UriClip ()
		{
			GtkSharp.GstEditingServices.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GES.SourceClip.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, "_ges_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_ges_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _ges_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
